# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)
=begin
platform :ios do
  before_all do |lane, options|
    app_store_connect_api_key()  #authenticating with App Store Connect 
  end

  desc "Description of what the lane does"
  lane :custom_lane do
    # add actions here: https://docs.fastlane.tools/actions
  end

  desc "Create app on Apple Developer and App Store Connect"
  lane :create_app do
    produce
  end

  desc "Sync certificates"
  lane :sync_certificates do
    #read-only disables match from overriding the existing certificates.
    match({readonly: true, type: "appstore"})
  end

  desc "Create ipa"
  lane :build do
    #update profiles
    sync_profiles
    # Increases the build number by 1
    increment_build_number
    # Creates a signed file
    gym
  end

  desc "Upload to TestFlight"
  lane :beta do
    build
    pilot  
  end
end
=end
######padr√£o
platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    username = "youremail@gmail.com"
    company_name = "Company Name"
    sh "cp #{ENV["BRAND_ENV_PACKAGE_NAME"]} ../../.env"
    sh "cp #{ENV["BRAND_GOOGLE_SERVICE_INFO"]} ../app/GoogleService-Info.plist"
    sh "cd .. && yarn prepare-release"

    produce(
      username: username,
      app_identifier: ENV["BRAND_ID"],
      app_name: ENV["BRAND_APPNAME"],
      language: "English",
      team_name: company_name,
      enable_services: {
        push_notification: "on", 
      }
    )

    match(
      git_url: "git@github.com:username/repository.git",
      type: "appstore",
      readonly: false
    )

    sigh(
      username: username,
      app_identifier: ENV["BRAND_ID"],
      output_path: "provisioning_profiles",
      team_name: company_name
    )

    update_project_provisioning(
      xcodeproj: "app.xcodeproj",
      profile: ENV["SIGH_PROFILE_PATH"],
      target_filter: "app",
      build_configuration: "Release",
      code_signing_identity: "Apple Distribution: Company Name. (TEAMID)"
    )

    gym(
      workspace: "app.xcworkspace",
      scheme: "app",
      silent: true, 
      xcargs: "-allowProvisioningUpdates", 
    )
    testflight
  end

  desc "Push all apps beta build to TestFlight"
  lane :all_apps_beta do
    sh "bundle exec fastlane ios beta --env app1"
    #sh "bundle exec fastlane ios beta --env app2"
  end

  desc "Push a new app build to release"
  lane :release do
    username = "youremail@gmail.com"
    company_name = "Company Name"
    sh "cp #{ENV["BRAND_ENV_PACKAGE_NAME"]} ../../.env"
    sh "cp #{ENV["BRAND_GOOGLE_SERVICE_INFO"]} ../app/GoogleService-Info.plist"
    sh "cd .. && yarn prepare-release"

    produce(
      username: username,
      app_identifier: ENV["BRAND_ID"],
      app_name: ENV["BRAND_APPNAME"],
      language: "English",
      team_name: company_name,
      enable_services: {
        push_notification: "on", 
      }
    )

    match(
      git_url: "git@github.com:username/repository.git",
      type: "appstore",
      readonly: false
    )

    sigh(
      username: username,
      app_identifier: ENV["BRAND_ID"],
      output_path: "provisioning_profiles",
      team_name: company_name
    )

    update_project_provisioning(
      xcodeproj: "app.xcodeproj",
      profile: ENV["SIGH_PROFILE_PATH"],
      target_filter: "app",
      build_configuration: "Release",
      code_signing_identity: "Apple Distribution: Company Name. (TEAMID)"
    )

    get_push_certificate

    gym(
      workspace: "app.xcworkspace",
      scheme: "app",
      silent: true, 
      xcargs: "-allowProvisioningUpdates", 
    )
    upload_to_app_store
  end
  
  desc "Push all apps release build to AppStore"
  lane :all_apps_release do
    sh "bundle exec fastlane ios release --env app1"
    sh "bundle exec fastlane ios release --env app2"
  end
end  
